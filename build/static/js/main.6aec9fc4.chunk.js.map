{"version":3,"sources":["services/yoga-api.js","components/ClassListItem/ClassListItem.jsx","components/ClassListPage/ClassListPage.jsx","components/AddClassPage/AddClassPage.jsx","components/ClassCard/ClassCard.jsx","components/ClassDetailPage/ClassDetailPage.jsx","components/EditClassPage/EditClassPage.jsx","App.js","serviceWorker.js","index.js"],"names":["create","yogaClass","fetch","method","headers","body","JSON","stringify","then","res","json","update","_id","deleteOne","id","ClassListItem","props","className","name","to","pathname","state","onClick","handleDeleteClass","ClassListPage","yogaClasses","map","key","AddClassPage","invalidForm","formData","breed","age","formRef","React","createRef","handleSubmit","e","preventDefault","handleAddClass","handleChange","target","value","setState","current","checkValidity","ref","this","autoComplete","onSubmit","title","onChange","required","dateTime","instructor","description","yogaClassSize","price","type","disabled","Component","ClassCard","ClassDetailPage","location","EditClassPage","handleUpdateClass","App","newYogaClassData","a","yogaClassAPI","newYogaClass","history","push","updatedYogaClassData","updatedClass","newYogaClassesArray","p","filter","exact","path","render","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gYAOO,SAASA,EAAOC,GACrB,OAAOC,MARQ,YAQQ,CACrBC,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUN,KACpBO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAGd,SAASC,EAAOV,GACrB,OAAOC,MAAM,GAAD,OAhBG,YAgBH,YAAgBD,EAAUW,KAAO,CAC3CT,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAUN,KACpBO,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAGd,SAASG,EAAUC,GACxB,OAAOZ,MAAM,GAAD,OAxBG,YAwBH,YAAgBY,GAAM,CAChCX,OAAQ,WACPK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,U,YCgBNK,MArCf,SAAuBC,GACrB,OACE,yBAAKC,UAAU,uBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eAAeD,EAAMf,UAAUiB,OAE/C,yBAAKD,UAAU,2CACb,kBAAC,IAAD,CACEA,UAAU,sBACVE,GAAI,CACFC,SAAU,WACVC,MAAO,CAACpB,UAAWe,EAAMf,aAJ7B,WAUA,kBAAC,IAAD,CACEgB,UAAU,yBACVE,GAAI,CACFC,SAAU,QACVC,MAAO,CAACpB,UAAWe,EAAMf,aAJ7B,QAUA,4BACEgB,UAAU,uCACVK,QAAS,kBAAMN,EAAMO,kBAAkBP,EAAMf,UAAUW,OAFzD,aCbOY,MAhBf,SAAuBR,GACrB,OACE,oCACE,0CACA,yBAAKC,UAAU,sBACZD,EAAMS,YAAYC,KAAI,SAAAzB,GAAS,OAC9B,kBAAC,EAAD,CACEA,UAAWA,EACX0B,IAAK1B,EAAUW,IACfW,kBAAmBP,EAAMO,0B,gBCyFtBK,E,4MAlGdP,MAAQ,CACNQ,aAAa,EACbC,SAAU,CACRZ,KAAM,GACNa,MAAO,QACPC,IAAK,M,EAITC,QAAUC,IAAMC,Y,EAEhBC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKtB,MAAMuB,eAAe,EAAKlB,MAAMS,W,EAGvCU,aAAe,SAAAH,GACb,IAAMP,EAAQ,2BAAO,EAAKT,MAAMS,UAAlB,kBAA6BO,EAAEI,OAAOvB,KAAOmB,EAAEI,OAAOC,QACpE,EAAKC,SAAS,CACZb,WACAD,aAAc,EAAKI,QAAQW,QAAQC,mB,uDAKrC,OACE,oCACE,yCACA,0BAAMC,IAAKC,KAAKd,QAASe,aAAa,MAAMC,SAAUF,KAAKX,cACzD,yBAAKnB,UAAU,cACb,+CACA,2BACEA,UAAU,eACVC,KAAK,QACLwB,MAAOK,KAAK1B,MAAMS,SAASoB,MAC3BC,SAAUJ,KAAKP,aACfY,UAAQ,KAGZ,yBAAKnC,UAAU,cACb,kDACA,2BACEA,UAAU,eACVC,KAAK,WACLwB,MAAOK,KAAK1B,MAAMS,SAASuB,SAC3BF,SAAUJ,KAAKP,aACfY,UAAQ,KAGZ,yBAAKnC,UAAU,cACb,+CACA,2BACEA,UAAU,eACVC,KAAK,aACLwB,MAAOK,KAAK1B,MAAMS,SAASwB,WAC3BH,SAAUJ,KAAKP,gBAGnB,yBAAKvB,UAAU,cACb,gDACA,2BACEA,UAAU,eACVC,KAAK,cACLwB,MAAOK,KAAK1B,MAAMS,SAASyB,YAC3BJ,SAAUJ,KAAKP,gBAGnB,yBAAKvB,UAAU,cACb,+CACA,2BACEA,UAAU,eACVC,KAAK,gBACLwB,MAAOK,KAAK1B,MAAMS,SAAS0B,cAC3BL,SAAUJ,KAAKP,gBAGnB,yBAAKvB,UAAU,cACb,0CACA,2BACEA,UAAU,eACVC,KAAK,QACLwB,MAAOK,KAAK1B,MAAMS,SAAS2B,MAC3BN,SAAUJ,KAAKP,gBAInB,4BACEkB,KAAK,SACLzC,UAAU,MACV0C,SAAUZ,KAAK1B,MAAMQ,aAHvB,mB,GAvFkB+B,aCqBZC,MApBf,YAAiC,IAAb5D,EAAY,EAAZA,UAClB,OACE,yBAAKgB,UAAU,uBACb,yBAAKA,UAAU,iBACb,wBAAIA,UAAU,eAAehB,EAAUiB,OAEzC,yBAAKD,UAAU,cACb,4BACE,qCACA,4BAAKhB,EAAU8B,OACf,mCACA,4BAAK9B,EAAU+B,OAGnB,yBAAKf,UAAU,gBACb,kBAAC,IAAD,CAAME,GAAG,KAAT,qBCHO2C,MAbf,SAAyB9C,GAExB,IAAMf,EAAYe,EAAM+C,SAAS1C,MAAMpB,UACvC,OACE,oCACE,6CACA,kBAAC,EAAD,CACE0B,IAAK1B,EAAUW,IACfX,UAAWA,MC0DH+D,E,4MAhEd3C,MAAQ,CACNQ,aAAa,EAEbC,SAAU,EAAKd,MAAM+C,SAAS1C,MAAMpB,W,EAEtCgC,QAAUC,IAAMC,Y,EAChBC,aAAe,SAAAC,GACbA,EAAEC,iBACF,EAAKtB,MAAMiD,kBAAkB,EAAK5C,MAAMS,W,EAE1CU,aAAe,SAAAH,GACb,IAAMP,EAAQ,2BAAO,EAAKT,MAAMS,UAAlB,kBAA6BO,EAAEI,OAAOvB,KAAOmB,EAAEI,OAAOC,QACpE,EAAKC,SAAS,CACZb,WACAD,aAAc,EAAKI,QAAQW,QAAQC,mB,uDAIrC,OACE,oCACE,0CACA,0BAAMC,IAAKC,KAAKd,QAASe,aAAa,MAAMC,SAAUF,KAAKX,cACzD,yBAAKnB,UAAU,cACb,wDACA,2BACEA,UAAU,eACVC,KAAK,OACLwB,MAAOK,KAAK1B,MAAMS,SAASZ,KAC3BiC,SAAUJ,KAAKP,aACfY,UAAQ,KAGZ,yBAAKnC,UAAU,cACb,yDACA,2BACEA,UAAU,eACVC,KAAK,QACLwB,MAAOK,KAAK1B,MAAMS,SAASC,MAC3BoB,SAAUJ,KAAKP,aACfY,UAAQ,KAGZ,yBAAKnC,UAAU,cACb,4CACA,2BACEA,UAAU,eACVC,KAAK,MACLwB,MAAOK,KAAK1B,MAAMS,SAASE,IAC3BmB,SAAUJ,KAAKP,gBAGnB,4BACEkB,KAAK,SACLzC,UAAU,aACV0C,SAAUZ,KAAK1B,MAAMQ,aAHvB,cA9BF,WAqCE,kBAAC,IAAD,CAAMV,GAAG,KAAT,gB,GA3DmByC,aC4FbM,E,4MApFb7C,MAAQ,CACNI,YAAa,I,EASfc,e,uCAAiB,WAAM4B,GAAN,eAAAC,EAAA,sEACYC,EAAoBF,GADhC,OACTG,EADS,OAEf,EAAK3B,UAAS,SAAAtB,GAAK,MAAK,CACtBI,YAAY,GAAD,mBAAMJ,EAAMI,aAAZ,CAAyB6C,QAGtC,kBAAM,EAAKtD,MAAMuD,QAAQC,KAAK,QANf,2C,wDASjBP,kB,uCAAoB,WAAMQ,GAAN,iBAAAL,EAAA,sEACSC,EAAoBI,GAD7B,OACZC,EADY,OAGZC,EAAsB,EAAKtD,MAAMI,YAAYC,KAAI,SAAAkD,GAAC,OACtDA,EAAEhE,MAAQ8D,EAAa9D,IAAM8D,EAAeE,KAE9C,EAAKjC,SACH,CAAClB,YAAakD,IAEd,kBAAM,EAAK3D,MAAMuD,QAAQC,KAAK,QATd,2C,wDAapBjD,kB,uCAAmB,WAAMT,GAAN,SAAAsD,EAAA,sEACXC,EAAuBvD,GADZ,OAEjB,EAAK6B,UAAS,SAAAtB,GAAK,MAAK,CAEtBI,YAAaJ,EAAMI,YAAYoD,QAAO,SAAAD,GAAC,OAAIA,EAAEhE,MAAQE,SACnD,kBAAM,EAAKE,MAAMuD,QAAQC,KAAK,QALjB,2C,wPPxCZtE,MAHQ,aAIdM,MAAK,SAAAC,GAAG,OAAIA,EAAIC,U,OOaTe,E,OACNsB,KAAKJ,SAAS,CAAClB,gB,qIAiCP,IAAD,OACP,OACE,yBAAKR,UAAU,OACb,4BAAQA,UAAU,cAAlB,kBAEE,6BACE,kBAAC,IAAD,CAAS6D,OAAK,EAAC3D,GAAG,KAAlB,cAGA,kBAAC,IAAD,CAAS2D,OAAK,EAAC3D,GAAG,QAAlB,eAKJ,8BACE,kBAAC,IAAD,CACE2D,OAAK,EACLC,KAAK,IACLC,OAAQ,kBACN,kBAAC,EAAD,CACEvD,YAAa,EAAKJ,MAAMI,YACxBF,kBAAmB,EAAKA,uBAI9B,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,OAAOC,OAAQ,kBAC/B,kBAAC,EAAD,CACEzC,eAAgB,EAAKA,oBAGzB,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,WAAWC,OAAQ,gBAAEjB,EAAF,EAAEA,SAAF,OACnC,kBAAC,EAAD,CAAiBA,SAAUA,OAE7B,kBAAC,IAAD,CAAOe,OAAK,EAACC,KAAK,QAAQC,OAAQ,gBAAEjB,EAAF,EAAEA,SAAF,OAChC,kBAAC,EAAD,CACEE,kBAAmB,EAAKA,kBACxBF,SAAUA,a,GA7ENH,aCEEqB,QACW,cAA7BC,OAAOnB,SAASoB,UAEe,UAA7BD,OAAOnB,SAASoB,UAEhBD,OAAOnB,SAASoB,SAASC,MACvB,2DCXNC,IAASL,OACP,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOA,OAAQ,gBAAET,EAAF,EAAEA,QAAF,OAAe,kBAAC,EAAD,CAAKA,QAASA,QAE9Ce,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlF,MAAK,SAAAmF,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6aec9fc4.chunk.js","sourcesContent":["const BASE_URL = '/api/yoga';\n\nexport function getAll() {\n  return fetch(BASE_URL)\n  .then(res => res.json());\n}\n\nexport function create(yogaClass) {\n  return fetch(BASE_URL, {\n    method: 'POST',\n    headers: {'content-type': 'application/json'},\n    body: JSON.stringify(yogaClass)\n  }).then(res => res.json());\n}\n\nexport function update(yogaClass) {\n  return fetch(`${BASE_URL}/${yogaClass._id}`, {\n    method: 'PUT',\n    headers: {'content-type': 'application/json'},\n    body: JSON.stringify(yogaClass)\n  }).then(res => res.json());\n}\n\nexport function deleteOne(id) {\n  return fetch(`${BASE_URL}/${id}`, {\n    method: 'DELETE'\n  }).then(res => res.json());\n}","import React from 'react';\n// eslint-disable-next-line\nimport {Link} from 'react-router-dom';\nimport './ClassListItem.css';\n\nfunction ClassListItem(props) { \n  return (\n    <div className='panel panel-default'>\n      <div className=\"panel-heading\">\n        <h3 className='panel-title'>{props.yogaClass.name}</h3>\n      </div>\n      <div className='panel-footer ClassListItem-action-panel'>\n        <Link\n          className='btn btn-xs btn-info'\n          to={{\n            pathname: '/details',\n            state: {yogaClass: props.yogaClass}\n          }}\n        >\n          DETAILS\n        </Link>\n        \n        <Link\n          className='btn btn-xs btn-warning'\n          to={{\n            pathname: '/edit',\n            state: {yogaClass: props.yogaClass}\n          }}\n          >\n          EDIT\n        </Link>\n\n        <button\n          className=\"btn btn-xs btn-danger margin-left-10\"\n          onClick={() => props.handleDeleteClass(props.yogaClass._id)}\n        >\n          DELETE\n        </button>\n      </div>\n    </div>\n  );\n}\nexport default ClassListItem;","import React from \"react\";\nimport \"./ClassListPage.css\";\nimport ClassListItem from \"../ClassListItem/ClassListItem\";\nfunction ClassListPage(props) {\n  return (\n    <>\n      <h1>Class List</h1>\n      <div className=\"ClassListPage-grid\">\n        {props.yogaClasses.map(yogaClass => (\n          <ClassListItem \n            yogaClass={yogaClass} \n            key={yogaClass._id} \n            handleDeleteClass={props.handleDeleteClass}\n            />\n        ))} \n      </div>\n    </>\n  );\n}\nexport default ClassListPage;","import React, {Component} from 'react';\n\nclass AddClassPage extends Component {\n state = {\n   invalidForm: true,\n   formData: {\n     name: '',\n     breed: 'Mixed',\n     age: '0'\n   }\n };\n \n formRef = React.createRef();\n \n handleSubmit = e => {\n   e.preventDefault();\n   this.props.handleAddClass(this.state.formData);\n };\n \n handleChange = e => {\n   const formData = {...this.state.formData, [e.target.name]: e.target.value};\n   this.setState({\n     formData,\n     invalidForm: !this.formRef.current.checkValidity()\n   });\n };\n \n render() {\n   return (\n     <>\n       <h1>Add Class</h1>\n       <form ref={this.formRef} autoComplete=\"off\" onSubmit={this.handleSubmit}>\n         <div className=\"form-group\">\n           <label>Class Name: </label>\n           <input\n             className=\"form-control\"\n             name=\"title\"\n             value={this.state.formData.title}\n             onChange={this.handleChange}\n             required\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Date and Time: </label>\n           <input\n             className=\"form-control\"\n             name=\"dateTime\"\n             value={this.state.formData.dateTime}\n             onChange={this.handleChange}\n             required\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Instructor: </label>\n           <input\n             className=\"form-control\"\n             name=\"instructor\"\n             value={this.state.formData.instructor}\n             onChange={this.handleChange}\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Description: </label>\n           <input\n             className=\"form-control\"\n             name=\"description\"\n             value={this.state.formData.description}\n             onChange={this.handleChange}\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Class Size: </label>\n           <input\n             className=\"form-control\"\n             name=\"yogaClassSize\"\n             value={this.state.formData.yogaClassSize}\n             onChange={this.handleChange}\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Price: </label>\n           <input\n             className=\"form-control\"\n             name=\"price\"\n             value={this.state.formData.price}\n             onChange={this.handleChange}\n           />\n         </div>\n\n         <button\n           type=\"submit\"\n           className=\"btn\"\n           disabled={this.state.invalidForm}\n         >\n           ADD CLASS\n         </button>\n       </form>\n     </>\n   );\n }\n}\nexport default AddClassPage;","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nfunction ClassCard({yogaClass}) { \n  return (\n    <div className='panel panel-default'>\n      <div className=\"panel-heading\">\n        <h3 className='panel-title'>{yogaClass.name}</h3>\n      </div>\n      <div className='panel-body'>\n        <dl>\n          <dt>Breed</dt>\n          <dd>{yogaClass.breed}</dd>\n          <dt>Age</dt>\n          <dd>{yogaClass.age}</dd>\n        </dl>\n      </div>\n      <div className='panel-footer'>\n        <Link to='/'>RETURN TO LIST</Link>\n      </div>\n    </div>\n  );\n}\nexport default ClassCard;","import React from 'react';\nimport ClassCard from '../../components/ClassCard/ClassCard';\nfunction ClassDetailPage(props) {\n // Refer to ClassListItem to see how yogaClass is being passed via the <Link>\n const yogaClass = props.location.state.yogaClass;\n return (\n   <>\n     <h1>Class Details</h1>\n     <ClassCard\n       key={yogaClass._id}\n       yogaClass={yogaClass}\n     />\n   </>\n );\n}\nexport default ClassDetailPage;","import React, {Component} from 'react';\nimport {Link} from 'react-router-dom';\n\nclass EditClassPage extends Component {\n state = {\n   invalidForm: false,\n   // Refer to ClassListItem to see how yogaClass is being passed via the <Link>\n   formData: this.props.location.state.yogaClass\n };\n formRef = React.createRef();\n handleSubmit = e => {\n   e.preventDefault();\n   this.props.handleUpdateClass(this.state.formData);\n };\n handleChange = e => {\n   const formData = {...this.state.formData, [e.target.name]: e.target.value};\n   this.setState({\n     formData,\n     invalidForm: !this.formRef.current.checkValidity()\n   });\n };\n render() {\n   return (\n     <>\n       <h1>Edit Class</h1>\n       <form ref={this.formRef} autoComplete=\"off\" onSubmit={this.handleSubmit}>\n         <div className=\"form-group\">\n           <label>Pup's Name (required)</label>\n           <input\n             className=\"form-control\"\n             name=\"name\"\n             value={this.state.formData.name}\n             onChange={this.handleChange}\n             required\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Pup's Breed (required)</label>\n           <input\n             className=\"form-control\"\n             name=\"breed\"\n             value={this.state.formData.breed}\n             onChange={this.handleChange}\n             required\n           />\n         </div>\n         <div className=\"form-group\">\n           <label>Pup's Age</label>\n           <input\n             className=\"form-control\"\n             name=\"age\"\n             value={this.state.formData.age}\n             onChange={this.handleChange}\n           />\n         </div>\n         <button\n           type=\"submit\"\n           className=\"btn btn-xs\"\n           disabled={this.state.invalidForm}\n         >\n           SAVE PUPPY\n         </button>&nbsp;&nbsp;\n         <Link to='/'>CANCEL</Link>\n       </form>\n     </>\n   );\n }\n}\nexport default EditClassPage;","import React, {Component} from 'react';\nimport './App.css';\nimport {Route, NavLink} from 'react-router-dom';\n// The following imports all named exports attached to yogaClassAPI\nimport * as yogaClassAPI from './services/yoga-api';\nimport ClassListPage from './components/ClassListPage/ClassListPage';\nimport AddClassPage from './components/AddClassPage/AddClassPage';\nimport ClassDetailPage from './components/ClassDetailPage/ClassDetailPage';\nimport EditClassPage from './components/EditClassPage/EditClassPage';\n\nclass App extends Component {\n  state = {\n    yogaClasses: []\n  };\n  \n  //Runs everytime after render() is called\n  async componentDidMount() {\n    const yogaClasses = await yogaClassAPI.getAll();\n    this.setState({yogaClasses});\n  }\n\n  handleAddClass = async newYogaClassData => {\n    const newYogaClass = await yogaClassAPI.create(newYogaClassData);\n    this.setState(state => ({\n      yogaClasses: [...state.yogaClasses, newYogaClass]\n    }),\n    // Using cb to wait for state to update before rerouting\n    () => this.props.history.push('/'));\n  }//////////////////////\n\n  handleUpdateClass = async updatedYogaClassData => {\n    const updatedClass = await yogaClassAPI.update(updatedYogaClassData);\n    // Using map to replace just the yogaClass that was updated\n    const newYogaClassesArray = this.state.yogaClasses.map(p => \n      p._id === updatedClass._id ? updatedClass : p\n    );\n    this.setState(\n      {yogaClasses: newYogaClassesArray},\n      // This cb function runs after state is updated\n      () => this.props.history.push('/')\n    );\n  }\n\n  handleDeleteClass= async id => {\n    await yogaClassAPI.deleteOne(id);\n    this.setState(state => ({\n      // Yay, filter returns a NEW array\n      yogaClasses: state.yogaClasses.filter(p => p._id !== id)\n    }), () => this.props.history.push('/'));\n  }\n  \n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          Courtney's Yoga\n          <nav>\n            <NavLink exact to='/'>\n              My Classes\n            </NavLink>\n            <NavLink exact to='/add'>\n              Add Class\n            </NavLink>\n          </nav>\n        </header>\n        <main>\n          <Route \n            exact \n            path='/' \n            render={() => \n              <ClassListPage\n                yogaClasses={this.state.yogaClasses}\n                handleDeleteClass={this.handleDeleteClass}\n              />\n            } \n          />\n          <Route exact path='/add' render={() => \n            <AddClassPage\n              handleAddClass={this.handleAddClass}\n            />\n          } />\n          <Route exact path='/details' render={({location}) => \n            <ClassDetailPage location={location}/>\n          } />\n          <Route exact path='/edit' render={({location}) => \n            <EditClassPage\n              handleUpdateClass={this.handleUpdateClass}\n              location={location}\n            />\n          } />\n        </main>\n      </div>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Router>\n    <Route render={({history}) => <App history={history} />} />\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}